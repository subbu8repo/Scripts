pv.yml

# create a path
sudo mkdir -p /mnt/data

vi pv.yml

apiVersion: v1
kind: PersistentVolume
metadata:
  name: task-pv-volume
  labels:
    type: local
spec:
  storageClassName: manual
  capacity:
    storage: 1Gi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: "/mnt/data"


kubectl apply -f pv.yml
kubectl get pv
kubectl describe pv pvname
# go to path and create index.html file
cd /mnt/data
sudo vi index.html           # use sudo infront because it is a mount file go back to home directory
cd .. 
cd.. or use   cd ~
df -h    # to check space
# now we can assign it to pods by binding and binding will be done by using persistent volume claim

pvc.yml

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: task-pv-volume
spec:
  storageClassName: manual
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 500Mi

vi pvc.yml
kubecyl apply -f pvc.yml
kubectl get pvc                                                 # you can see status bounded with pv of nearest pv with 1gb 
kubectl describe pv pvcname
kubectl get pv                                                  # you can see status and claim
# now you can create a pod and assign this pv to pod

vim pod.yml

apiVersion: v1
kind: Pod
metadata:
  name: nginx-pod
spec:
  volumes:
    - name: nginx-storage
      persistentVolumeClaim:
        claimName: task-pv-volume
  containers:
    - name: nginx-pv
      image: nginx
      ports:
        - containerPort: 80
      volumeMounts:
        - mountPath: "/usr/share/nginx/html"
          name: nginx-storage

kubectl apply -f pod.yml
kubectl get pods                                 # to access pod assign service or else do a short cut
kubectl exec -it podname -- /bin/bash            # login to pod
cat /usr/share/nginx/html/index.html












  
